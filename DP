import java.util.*;
public class DP {
    //1.fibonacci code by using recursion
    //time compx = O(2^n), it is greater than o(n)
    /*public static int fib(int n)
    {
        if(n==0 || n==1)
        {
            return n;
        }
        return fib(n-1)+fib(n-2);
    }
    public static void main(String args[])
    {
        int n=5;
        System.out.println(fib(n));
    }

     */


    //1.fibonacci code by using  memoization --> use memoization + recursion
    //time compx = O(n)
    //That means it is linear
   /* public static int fib(int n,int f[])
    {
        if(n==0 || n==1)
        {
            return n;
        }
        if(f[n] != 0)
        {
            return f[n];
        }
        f[n] = fib(n-1,f)+fib(n-2,f);
        return f[n];
    }
    public static void main(String args[])
    {
        int n=5;
        int f[] = new int[n+1];
        System.out.println(fib(n,f));
    }

    */


    //1. fibonacci code by using tabulation --> only use table
    //Time complexity = O(n)
    //That means it is linear
    /*public static int fib(int n)
    {
        int dp[] = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i =2 ;i<= n ; i++)
        {
            dp[i] = dp[i-1] + dp[i-2];
        }
         return dp[n];
    }
    public static void main(String args[])
    {
        int n=8;
        int f[] = new int[n+1];
        System.out.println(fib(n));
    }

     */


    //2.Climbing stairs problem using recursion
    //M-1
   /* public static int countways(int n)
    {
        if(n==0)
        {
            return 1;
        }
        if(n<0)
        {
            return 0;
        }
        return countways(n-1) + countways(n-2);
    }
    public static void main(String args[])
    {
        int n=4;
        System.out.println(countways(n));
    }

    */


    //2.Climbing stairs problem using memoization
    //M-2
    /*public static int countways(int n , int ways[])
    {
        if(n==0)
        {
            return 1;
        }
        if(n<0)
        {
            return 0;
        }
        if(ways[n] != -1)  //already calculated
        {
            return ways[n];
        }
        ways[n] = countways(n-1,ways) + countways(n-2,ways);
        return ways[n];
    }
    public static void main(String args[])
    {
        int n=5;
        int ways[] = new int[n+1];
        Arrays.fill(ways,-1);
        System.out.println(countways(n,ways));
    }

     */


    //3 Climbing stairs problem using tabulation
    /*public static int countwaystab(int n)
    {
        int dp[] = new int[n+1];
        dp[0] = 1;

        //tabulation loop
        for(int i=1;i<=n;i++)
        {
            if(i==1)
            {
                dp[i] = dp[i-1]+0;
            }
            else
            {
                dp[i] = dp[i-1] + dp[i-2];
            }

        }
        return dp[n];
    }

    public static void main(String args[])
    {
        int n=5;
        int ways[] = new int[n+1];
        System.out.println(countwaystab(n));
    }

     */


    //4 M-1) 0-1 Knapsack problem USING RECURSION
    /*public static int knapsack(int val[],int wt[],int W,int n)
    {
        if(W==0 || n==0)
        {
            return 0;
        }
        if(wt[n-1] <= W) //valid
        {
            //include
             int ans1 = val[n-1] + knapsack(val,wt,W-wt[n-1],n-1);
            //exclude
            int ans2 = knapsack(val,wt,W,n-1);
            return Math.max(ans1,ans2);
        }
        else   //not valid
        {
            return knapsack(val,wt,W,n-1);
        }
    }
    public static void main(String args[])
    {
        int val[] = {15,14,10,45,30};
        int wt[] = {2,5,1,3,4};
        int W = 7;
        System.out.println(knapsack(val,wt,W,val.length));
    }

     */


    //4 M-2) 0-1 Knapsack problem USING Memoization
   /* public static int knapsack(int val[],int wt[],int W,int n,int dp[][])
    {
        if(W==0 || n==0)
        {
            return 0;
        }
        if(dp[n][W] != -1)
        {
            return dp[n][W];
        }
        if(wt[n-1] <= W) //valid
        {
            //include
            int ans1 = val[n-1] + knapsack(val,wt,W-wt[n-1],n-1,dp);
            //exclude
            int ans2 = knapsack(val,wt,W,n-1,dp);
            dp[n][W] = Math.max(ans1,ans2);
            return  dp[n][W];
        }
        else   //not valid
        {
            dp[n][W] = knapsack(val,wt,W,n-1,dp);
            return dp[n][W];
        }
    }
    public static void main(String args[])
    {
        int val[] = {15,14,10,45,30};
        int wt[] = {2,5,1,3,4};
        int W = 7;
        int dp[][] = new int[val.length+1][W+1];
        for(int i=0;i<dp.length;i++)
        {
            for(int j=0;j<dp[0].length;j++)
            {
                dp[i][j] = -1;
            }
        }
        System.out.println(knapsack(val,wt,W,val.length,dp));
    }

    */


//4 M-3) 0-1 Knapsack problem USING Tabulation
   /*public static int knapsacktab(int val[],int wt[],int W)
   {
       int n = val.length;
       int dp[][] = new int[n+1][W+1];
       for(int i=0;i<dp.length;i++) // initilize 0th  col
       {
           dp[i][0] = 0;
       }
       for(int j=0;j<dp.length;j++) // initilize 0th row
       {
           dp[0][j] = 0;
       }
       for(int i=1;i<n+1;i++)
       {
           for(int j=1;j<W+1;j++)
           {
               int v = val[i-1];    //VALUE of ith item
               int w = wt[i-1];     //weight of ith item
               if(w<= j)   //valid
               {
                   int incprofit = v + dp[i-1][j-w];  //include
                   int profit = dp[i-1][j];    //exclude
                   dp[i][j] = Math.max(incprofit,profit);
               }
               else  //invalid
               {
                   int profit = dp[i-1][j];
                   dp[i][j] = profit;
               }
           }
       }
       return dp[n][W];
   }
    public static void main(String args[])
    {
        int val[] = {15,14,10,45,30};
        int[] wt = {2,5,1,3,4};
        int W = 7;
        System.out.println(knapsacktab(val,wt,W));
    }

    */


    //5. Target sum subset
    /*public static boolean targetsum(int arr[],int sum)
    {
        int n = arr.length;
        boolean dp[][] = new boolean[n+1][sum+1];
        //i = item & j = target sum
        for(int i=0;i<n+1;i++)
        {
            dp[i][0]=true;
        }
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                int v = arr[i-1];
                //include
                if(v<=j && dp[i-1][j-v] == true)
                {
                    dp[i][j] = true;
                }
                //exclude
                else if(dp[i-1][j] == true)
                {
                    dp[i][j] = true;
                }
            }
        }
        return dp[n][sum];
    }
    public static void main(String args[])
    {
        int arr[] = {4,2,7,1,3};
        int sum = 6;
        System.out.println(targetsum(arr,sum));
    }

     */


    //6.Unbounded knapsack problem
   /* public static int Unbounded(int val[],int wt[],int W)
    {
        int n = val.length;
        int dp[][] = new int[n+1][W+1];
        for(int i=0;i<dp.length;i++) // initilize 0th  col with 0
        {
            dp[i][0] = 0;
        }
        for(int j=0;j<dp.length;j++) // initilize 0th row with 0
        {
            dp[0][j] = 0;
        }
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<W+1;j++)
            {
                int v = val[i-1];    //VALUE of ith item
                int w = wt[i-1];     //weight of ith item
                if(w<= j)   //valid
                {
                    int incprofit = v + dp[i][j-w];  //include
                    int profit = dp[i-1][j];    //exclude
                    dp[i][j] = Math.max(incprofit,profit);
                }
                else  //invalid
                {

                    dp[i][j] =dp[i-1][j];
                }
            }
        }
        return dp[n][W];
    }
    public static void main(String args[])
    {
        int val[] = {15,14,10,45,30};
        int[] wt = {2,5,1,3,4};
        int W = 7;
        System.out.println(Unbounded(val,wt,W));
    }

    */


    //7. Coin change problem
    /* public static int coinchange(int coins[],int sum)
     {
         int n = coins.length;
         int dp[][] = new int[n+1][sum+1];
         //initialize sum =0
         //i-->coins,j-->sum/change
         for(int i=0;i<n+1;i++)
         {
             dp[i][0] =1;
         }
         for(int j=1;j<sum+1;j++)
         {
             dp[0][j] =0;
         }
         for(int i=1;i<n+1;i++)
         {
             for(int j=1;j<sum+1;j++)
             {
                 if(coins[i-1] <= j)  //valid
                 {
                     dp[i][j] = dp[i][j-coins[i-1]] + dp[i-1][j];
                 }
                 else  //invalid
                 {
                     dp[i][j] = dp[i-1][j];
                 }
             }
         }
         return dp[n][sum];
     }
     public static void main(String args[])
     {
         int coins[] = {2,5,3,6};
         int sum = 10;
         System.out.println(coinchange(coins,sum));
     }

     */





    //8 Rod cutting problem
    /*public static int rodcutting(int length[] , int price[],int totalrod)
    {
        int n = price.length;
        int dp[][] = new int[n+1][totalrod+1];

        // This is optional part. This part is automatically done by java. That's why no need to write again
        //for(int i=0;i<n+1;i++)
        //{
          //  for(int j=0;j<totalrod+1;j++)
          //  {
           //     if(i==0 || j==0)
             //   {
           //         dp[i][j] =0;
           //     }
           // }
       // }


        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<totalrod+1;j++)
            {
                //valid
                if(length[i-1] <= j)
                {
                    dp[i][j] = Math.max(price[i-1]+dp[i][j-length[i-1]],dp[i-1][j]);

                }
                else   //invalid
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][totalrod];
    }
    public static void main(String args[])
    {
        int length[] = {1,2,3,4,5,6,7,8};
        int price[] = {1,5,8,9,10,17,17,20};
        int totalrod = 8;
        System.out.println(rodcutting(length,price,totalrod));
    }
    */




    //9.M-1 Longest common subsequence using recursion
   /* public static int lcs(String str1,String str2,int n,int m)
    {
        if(n==0 || m==0)
        {
            return 0;
        }
        if(str1.charAt(n-1) == str2.charAt(m-1))
        {
            return lcs(str1,str2,n-1,m-1)+ 1;
        }
        else
        {
            int ans1 = lcs(str1,str2,n-1,m);
            int ans2 = lcs(str1,str2,n,m-1);
            return Math.max(ans1,ans2);

        }
    }
    public static void main(String args[])
    {
        String str1 = "abcdge";
        String str2 = "abedg";
        System.out.println(lcs(str1,str2,str1.length(),str2.length()));
    }

    */





    //9.M-2 Longest common subsequence memoization
   /* public static int lcs(String str1,String str2,int n,int m,int dp[][])
    {
        if(n==0 || m==0)
        {
            return 0;
        }
        if(dp[n][m] != -1)
        {
            return dp[n][m];
        }
        if(str1.charAt(n-1) == str2.charAt(m-1))
        {
            return dp[n][m] = lcs(str1,str2,n-1,m-1,dp)+ 1;
        }
        else
        {
            int ans1 = lcs(str1,str2,n-1,m,dp);
            int ans2 = lcs(str1,str2,n,m-1,dp);
            return dp[n][m] = Math.max(ans1,ans2);

        }
    }
    public static void main(String args[])
    {
        String str1 = "abcdge";
        String str2 = "abedg";
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                dp[i][j] = -1;
            }
        }
        System.out.println(lcs(str1,str2,n,m,dp));
    }

    */



    //9.M-3 Longest common subsequence using tabulation
    /*public static int lcs(String str1,String str2)
    {
      int n = str1.length();
      int m = str2.length();
      int dp[][] = new int[n+1][m+1];
      for(int i=0;i<n+1;i++)
      {
          for(int j =0;j<m+1;j++)
          {
              if(i==0 || j==0)
              {
                  dp[i][j] =0;
              }
          }
      }
      for(int i=1;i<n+1;i++)
      {
          for(int j=1;j<m+1;j++)
          {
              if(str1.charAt(i-1) == str2.charAt(j-1))
              {
                  dp[i][j] = dp[i-1][j-1]+1;
              }
              else
              {
                  int ans1 = dp[i-1][j];
                  int ans2 = dp[i][j-1];
                  dp[i][j] = Math.max(ans1,ans2);
              }
          }
      }
      return dp[n][m];
    }
    public static void main(String args[])
    {
        String str1 = "abcdge";
        String str2 = "abedg";
        System.out.println(lcs(str1,str2));
    }

     */




    //10. Longest common substring
   /* public static int substring(String str1,String str2)
    {
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];
        int ans = 0;

        //bottom up filling
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(str1.charAt(i-1) == str2.charAt(j-1))
                {
                    dp[i][j] = dp[i-1][j-1] +1;
                    ans = Math.max(ans,dp[i][j]);
                }
                else
                {
                    dp[i][j] =0;
                }
            }
        }
        return ans;
    }
    public static void main(String args[])
    {
        String str1 = "ABCDE";
        String str2 = "ABGCE";
        System.out.println(substring(str1,str2));
    }

    */



    // 11. Longest increasing subsequence
    /*public static int lcs(int arr1[],int arr2[])
    {
        int n = arr1.length;
        int m = arr2.length;
        int dp[][] = new int[n+1][m+1];

        //bottom
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(arr1[i-1] == arr2[j-1])
                {
                    dp[i][j] = dp[i-1][j-1]+1;
                }
                else
                {
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1,ans2);
                }
            }
        }
        return dp[n][m];
    }
    public static int lis(int arr1[])
    {
        HashSet<Integer> set = new HashSet<>();
        for(int i=0;i<arr1.length;i++)
        {
            set.add(arr1[i]);
        }
        int arr2[] = new int[set.size()];   //sorted unique ele
        int i=0;
        for(int num:set)
        {
            arr2[i] = num;
            i++;
        }
        Arrays.sort(arr2);
        return lcs(arr1,arr2);
    }
    public static void main(String args[])
    {
        int arr[] = {50,3,10,7,40,80};
        System.out.println(lis(arr));

    }

     */



    //12. Edit distance problem
    /*public static int editdistance(String str1,String str2)
    {
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];

        //initialize
        for(int i=0;i<n+1;i++)
        {
            for(int j =0;j<m+1;j++)
            {
                if(i == 0)
                {
                    dp[i][j] = j;
                }
                if(j == 0)
                {
                    dp[i][j] = i;
                }

            }
        }
        //bottom up
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if (str1.charAt(i-1) == str2.charAt(j-1))   //same
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else   //diff
                {
                    int add = dp[i][j-1]+1;
                    int del = dp[i-1][j]+1;
                    int rep = dp[i-1][j-1]+1;
                    dp[i][j] = Math.min(add,Math.min(del,rep));

                }
            }
        }
        return dp[n][m];
    }
    public static void main(String args[])
    {
        String word1 = "intention";
        String word2 = "execution";
        System.out.println(editdistance(word1,word2));
    }

     */



    //13.Wildcard matching (Hard level problem)
  /*  public static boolean isMatch(String s,String p)
    {
        int n = s.length();
        int m = p.length();
        boolean dp[][] = new boolean[n+1][m+1];

        //initialize
        dp[0][0] = true;
        for(int i=1;i<n+1;i++)
        {
            dp[i][0] = false;
        }
        for(int j=1;j<m+1;j++)
        {
            if(p.charAt(j-1) == '*')
            {
                dp[0][j] = dp[0][j-1];
            }
        }

        //bottom up
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '?')
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p.charAt(j-1) == '*' )
                {
                      dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
               else
               {
                    dp[i][j] = false;
               }
             }
          }
        return dp[n][m];
  }
public static void main(String args[])
{
      String s = "baaabab";
      String p = "a*ab";
      System.out.println(isMatch(s,p));
}

   */






    //14.M-1 Catelan's number using recursion
    /*public static int catelan(int n)
    {
        if(n==0 || n==1)
        {
            return 1;
        }
        int ans=0;
        for(int i=0;i<=n-1;i++)
        {
            ans += catelan(i) * catelan(n-i-1);
        }
        return ans;
    }
    public static void main(String args[])
    {
        int n =5;
        System.out.println(catelan(n));
    }

     */


    //14.M-2 Catelan's number using memoization
   /* public static int catelan(int n,int dp[])
    {
        if(n==0 || n==1)
        {
            return 1;
        }
        if(dp[n] != -1)
        {
            return dp[n];
        }
        int ans =0;
        for(int i=0;i<n;i++)
        {
            ans += catelan(i,dp) * catelan(n-i-1,dp);
        }
        return dp[n] = ans;
    }
    public static void main(String args[])
    {
        int n =5;
        int dp[] = new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(catelan(n,dp));
    }

    */

    //14.M-3 Catelan's number using tabulation
    /*public static int catelan(int n)
    {
        int dp[] = new int[n+1];
        dp[0] =1;
        dp[1] = 1;
        for(int i=2;i<=n;i++)
        {
            for(int j=0;j<i;j++)
            {
                dp[i] += dp[j] * dp[i-j-1];
            }
        }
        return dp[n];
    }
    public static void main(String args[])
    {
        System.out.println(catelan(5));
    }

     */





    //15. Counting trees
   /* public static int countBST(int n)
    {
        int dp[] = new int[n+1];
        dp[0] =1;
        dp[1]=1;
        for(int i=2;i<n+1;i++)
        {
            for(int j=0;j<i;j++)
            {
                int left = dp[j];
                int right = dp[i-j-1];
                dp[i] += left*right;
            }
        }
        return dp[n];
    }
    public static void main(String args[])
    {
        int n=3;
        System.out.println(countBST(n));
    }

    */






    //16.Mountain ranges
   /* public static int mountain(int n)
    {
        int dp[] = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2;i<n+1;i++)
        {
            for(int j=0;j<i;j++)
            {
                int inside = dp[j];
                int outside = dp[i-j-1];
                dp[i] += inside * outside;
            }
        }
        return dp[n];

    }
    public static void main(String args[])
    {
        int n=3;
        System.out.println(mountain(n));
    }

    */




    //17. matrix chain multiplication using recursion
    /*public static int mcm(int arr[],int i,int j)
    {
        if(i==j)
        {
            return 0;  //single matrix case
        }
        int ans = Integer.MAX_VALUE;
        for(int k =i;k<=j-1;k++)
        {
            int cost1 = mcm(arr,i,k);
            int cost2 = mcm(arr,k+1,j);         //
            int cost3 = arr[i-1]*arr[k]*arr[j];    //
            int finalcost = cost1+cost2+cost3;
            ans = Math.min(ans,finalcost);
        }
        return ans;
    }
    public static void main(String args[])
    {
        int arr[] = {1,2,3,4,3};
        int n = arr.length;
        System.out.println(mcm(arr,1,n-1));
    }

     */




//17. matrix chain multiplication using memoization
/*public static int mcm(int arr[],int i,int j,int dp[][])
{
    if(i==j)
    {
        return 0;  //single matrix case
    }
    if(dp[i][j] != -1)
    {
        return dp[i][j];
    }
    int ans = Integer.MAX_VALUE;
    for(int k =i;k<=j-1;k++)
    {
        int cost1 = mcm(arr,i,k,dp);
        int cost2 = mcm(arr,k+1,j,dp);         //
        int cost3 = arr[i-1]*arr[k]*arr[j];    //
        int finalcost = cost1+cost2+cost3;
        ans = Math.min(ans,finalcost);
    }
    return dp[i][j] = ans;
}
    public static void main(String args[])
    {
        int arr[] = {1,2,3,4,3};
        int n = arr.length;
        int dp[][] = new int[n][n];
        for(int i=0;i<n;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        System.out.println(mcm(arr,1,n-1,dp));
    }

 */






    //18 Minimum partitioning
   /* public static int minpartition(int arr[])
    {
        int n = arr.length;
        int sum =0;
        for(int i=0;i<n;i++)
        {
            sum += arr[i];
        }
        int w = sum/2;
        int dp[][]  = new int[n+1][w+1];
        //Bottom up
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<w+1;j++)
            {
                if(arr[i-1] <= j)   //valid
                {
                    dp[i][j] = Math.max(arr[i-1]+dp[i-1][j-arr[i-1]], dp[i-1][j]);
                }
                else          //invalid
                {
                    dp[i][j] =  dp[i-1][j];
                }

            }
        }
        int sum1 = dp[n][w];
        int sum2 = sum - sum1;
        return Math.abs(sum1-sum2);
    }
    public static void main(String args[])
    {
        int nums[] = { 1,6,11,5};
        System.out.println(minpartition(nums));
    }

    */







    //19. Minimum array jump
    public static int minjump(int nums[])
    {
        int n = nums.length;
        int dp[] = new int[n];
        Arrays.fill(dp,-1);
        dp[n-1] = 0;

        for(int i=n-2;i>=0;i--)
        {
            int steps = nums[i];
            int ans = Integer.MAX_VALUE;
            for(int j = i+1;j<=i+steps && j<n ;j++)
            {
                     if(dp[j] != -1)
                     {
                         ans = Math.min(ans,dp[j]+1);
                     }
            }
            if(ans != Integer.MAX_VALUE)
            {
                dp[i] = ans;
            }
        }
        return dp[0];
    }
    public static void main(String args[])
    {
        int nums[] = {2,3,1,1,4};
        System.out.println(minjump(nums));
    }
